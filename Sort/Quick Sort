
#include<iostream>
#include<cstdlib>
#include<ctime>
#include<algorithm>
#include<functional>

using namespace std;

int dubple[1000];

int main()
{  
   const int listSz=50;
   
   int quick[listSz+1];
   
   srand((unsigned)time(NULL));
   
    for (int i = 1; i <= listSz; )
    {
        quick[i] = rand() % 300 + 1;
        if (dubple[quick[i]] == false)
        {
            dubple[quick[i]] = true;
            i++;
        }
    }
    cout<<"Before Quick Sort"<<endl;
    cout<<endl;
    for(int i=1; i<=listSz; i++)cout<<quick[i]<<' ';
    cout<<endl;
    cout<<endl;
    cout<<"#####################################################################################################################"<<endl;
    cout<<endl;
    cout<<"After Quick Sort"<<endl;
    
	function<void(int*,int,int)> quick_sort=[&](int *pArr,int start,int end)
	{
		if(start >= end) {return;} 
		
		int pivot = start, left = pivot + 1, right = end, temp=0;
		
		while(left<=right)
		{
			while(left<=end && pArr[left]<=pArr[pivot]){left++;}
			while(right>start && pArr[right]>=pArr[pivot]){right--;}
			
			if(left>right){
				temp = pArr[right];
				pArr[right] = pArr[pivot];
				pArr[pivot] = temp; 
			}
			else{
				temp = pArr[left];
				pArr[left] = pArr[right];
				pArr[right] = temp; 
			}
		}
		quick_sort(pArr,start,left-1);
		quick_sort(pArr,right+1,end); 
	};
	
	quick_sort(quick,1,50);
	for(int i=1; i<=listSz; i++)cout<<quick[i]<<' ';
    cout<<endl;
	
    return 0;
}
